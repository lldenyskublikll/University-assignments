# Імпортуємо бібліотеки, які потрібні для математичних обчислень та побудови графіку функції
import numpy as np
import matplotlib.pyplot as plt

# Задана функція: y=lg(x)/arcsin(x)
# У даної функції немає екстремумів, тому у якості особливих точок знайдемо точки у яких у = 0

# Користувач задає інтервали та крок
while True:
     try: # Перевірка на коректність введених даних
        func_start = float(input("Введіть початкове значення інтервалу: ")) # Користувач задає початкове значення інтервалу
        func_end = float(input("Введіть кінцеве значення інтервалу: ")) # Користувач задає кінцеве значення інтервалу
        func_step = float(input("Введіть крок табуляції: ")) # користувач задає крок табуляції

        # Перевірка коректності введеного діапазону та кроку       
        if (func_start == func_end or func_step <= 0 or ((func_end - func_start) / func_step) < 1):
            print("Введені значення некоректні. Введіть значення ще раз.")
        # Якщо проміжок замалий або буде обраховуватись некоректно
        elif (func_start <= 0 and func_start > -2.5 and func_end >= 0 and func_end < 2.5 or func_start >= 0 and func_end <=1):
            print("Введений проміжок замалий або не підходить для аналізу. Оберіть інший проміжок.")
        else: # Якщо введені дані задовольняють усім умовам, цикл зупиняється
            break
     except ValueError: # Перевірка типу введених даних. Якщо це не число, виводиться повідомлення про некоректність даних
        print("Введені значення не є числом!!! Введіть значення ще раз.")

# Виведення інформації про задані параметри
print(f"Введені параметри:\n- початкова межа:{func_start}\n- кінцева межа:{func_end}\n- крок: {func_step}")

# Оголошення функції
def func(x):
    # Перевірка значень на відповідність до ОДЗ
    if x < 0 or x == 0 or x > 1: # Якщо значення не відповідають ОДЗ, повертається значення "не число"
        return np.nan 
    else: # Якщо значення відповідають ОДЗ, повертається значення "у" з округленням до 12 знаку після коми      
        return round(np.log10(x)/np.arcsin(x), 12)
    
# Створення масиву Х-ів
x_values = np.arange(func_start, func_end, func_step)

# Створення масиву У-ів
y_values = [func(x) for x in x_values]

#Знаходження значень "особливих" точок 
func_zeros = np.where(np.diff(np.sign(y_values)))[0]

# Виводимо таблицю значень х та у функції
print("\nФункцiя не визначена при: x<0; x=0; x>1\n")
print("Таблиця значень функції")
print("     x     |     y     ")
print("-----------------------")
for i in range(len(x_values)):
    if x_values[i] > 0 and x_values[i] <= 1: # умова для того, щоб у таблиці значень не виводились точки, де у не має значення
        print(f"{x_values[i]:.2f}       | {y_values[i]}")

# Виводимо значення х при яких у = 0 
print("\nНулі функції:")
print("     x     |     y     ")
print("-----------------------")
for zero in func_zeros:
    if y_values[zero] == 0:
        print(f"{x_values[zero]:.2f}       | {y_values[zero]}")

# Створюємо графік
figure, ax = plt.subplots()

# Додаємо значення х та у до графіку функції 
ax.plot(x_values, y_values)

# Оформлюємо графік функції
plt.title("Графік функції y = lg(x) / arcsin(x)") # Заголовок графіку
plt.xlabel("x") # Назва осі х
plt.ylabel("y") # Назва осі у
plt.grid(True) # Відображення сітки

# Додаємо нулі, екстремуми та точки розриву функції (якщо вони є)
for zero in func_zeros:
    if  y_values[zero] == 0:
        ax.plot(x_values[zero], y_values[zero], 'ro')

# Виводимо графік
plt.show()